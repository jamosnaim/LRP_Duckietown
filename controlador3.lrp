;;Comportamiento Interesante LRP Duckietown 2017;;Autonomía Nivel 3 con mejoras;;;;/punto es el tópico donde publica el nodo blob_color.py; pub -> /duckiebot/wheels_driver_node/car_cmd; punto <- /punto;control <- /duckiebot/joy (var girando:=[false]) ;verifica cuando está girando para no hacer otra cosa(var salida:=[false]) ;gatilla el evento para salir de "girar" de forma unificada, independiente de lo que pase(var direccion:=[1]);determina la dirección de giro(var vNormal:=[0.5]);velocidad del duckiebot(var w:=[8.3]);velocidad de giro(var ancho:=[320]);ancho de la imagen(var margen:=[60]);margen de seguridad(var d:=[15]);distancia de seguridad(machine duckie    (state noVePato ;estado mientras no ve patos cerca	;la idea de silencio es que los motores estén apagados cuando no se está tocando el control. para esto se definió un umbral bajo el cual no se publica la información del joystick        (machine silencio            (state mov1(running[robot pub:              [:msg | msg v: vNormal*(robot control axes at:2 ).            msg omega: w*(robot control axes at:1 )]]);se publica la información del joystick            )            (state mov2(running[robot pub:             [:msg | msg v: vNormal*(robot control axes at:2 ).            msg omega: w*(robot control axes at:1 )]]);hace lo mismo que mov1, pero con un temporizador para no detenerse inmediatamente            )            (state quieto (onentry[robot pub: [:msg | msg v:0. msg omega: 0]]));se detiene el duckiebot             (on quieto mov1->mov2);si no se envía señal comienza la detención        (on mueve quieto->mov1)        (on mueve mov2->mov1);se reanuda el movimiento (mov1) independiente de donde esté cuando se envía señal        (ontime 1000 mov2->quieto);se detiene tras un segundo sin señal           (event quieto [|a b |a:=(robot control axes at:1 ). b:=(robot control axes at:2 ). (a abs + b abs )<0.2])        (event mueve [|a b| a:=(robot control axes at:1 ). b:=(robot control axes at:2 ). (a abs+b abs)>0.2]);eventos que determinan cuando se está dentro o no del umbral        )        (onentry (spawn silencio quieto))    )    (state vePatoCerca ;estado cuando detecta un pato cerca 	;la idea ed girar es que el duckiebot gire poco a poco para no pasarse de largo por la potencia del motor, mediante un estado de giro y uno de detención       	(machine girar            (state giro                (onentry [|posx1|                    girando:=true.                     posx1:=robot punto x.                     (posx1< (ancho/2))                        ifTrue:[direccion:=1]                        ifFalse:[direccion:=-1]]                );se determina la posición del pato para escoger el sentido de rotación                (onentry[robot pub: [:msg | msg v:0. msg omega: -1*w*direccion]]);se rota            )            (state wait                (onentry[robot pub: [:msg | msg v:0. msg omega: 0]]);se detiene            )            (state terminar                (onentry [salida:=true])                    (onexit [salida:=false. girando:=false])            );estado al que se llega cuando el pato ya no peligra (bordes de la pantalla)            (on recuperar *->terminar)               (on yaNoVe wait->terminar)            (exit salida terminar->noVePato);sale de la máquina cuando se terminó el giro                       (ontime 150 giro->wait);tiempo de giro            (ontime 700 wait->giro)  ;tiempo de espera entre giros            (event recuperar [(robot control buttons at:6)=1 and:[cambio not]]) ;se detiene con RB            (event yaNoVe [| posx1 | posx1 := robot punto x. posx1>(ancho-margen) or:[posx1<margen]]);el pato está en los margenes de seguridad, así que deja de girar            (event salida [salida]);evento que gatilla la salida, cuando ya ha entrado al estado terminar        )        (onentry (spawn girar giro))        (onexit [robot pub: [:msg | msg v: 0. msg omega: 0. girando:=false]]);detiene el giro para que no salga mientras sigue girando, reestablece la variable "girando"    )    (state stop        (onentry [robot pub: [:msg | msg v: 0. msg omega: 0]]);detiene al duckiebot    )    (on cerca noVePato->vePatoCerca cerca)    (on detener *->stop detener)    (on seguir stop->noVePato seguir)     (event detener [(robot control buttons at:1 ) =1]);detiiene al duckiebot cuando se presiona A    (event seguir [(robot control buttons at:2) =1]);continua la acción del duckiebot cuando se presiona B    (event cerca [|posx1|posx1:=robot punto x. pos:= robot punto z. pos<d and:[pos>0 and:[girando not and:[posx1<(ancho-margen) and:[posx1>margen]]]]]);determina que hay pato cerca cuando está dentro de la distancia segura, está detectando un pato, no está dentro de un giro, y el pato está fuera del margen de seguridad    (event nove [|pos| pos:= robot punto z. (pos>d or:[pos= -1]) and:[girando not] ]));determina que no ve un pato cerca cuando no ve patos, están muy lejos y además no está ya girando(spawn duckie noVePato)